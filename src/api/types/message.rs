use crate::api::types::animation::Animation;
use crate::api::types::audio::Audio;
use crate::api::types::chat::Chat;
use crate::api::types::chat_shared::ChatShared;
use crate::api::types::contact::Contact;
use crate::api::types::dice::Dice;
use crate::api::types::document::Document;
use crate::api::types::external_reply_info::ExternalReplyInfo;
use crate::api::types::forum_topic_closed::ForumTopicClosed;
use crate::api::types::forum_topic_created::ForumTopicCreated;
use crate::api::types::forum_topic_edited::ForumTopicEdited;
use crate::api::types::forum_topic_reopened::ForumTopicReopened;
use crate::api::types::game::Game;
use crate::api::types::general_forum_topic_hidden::GeneralForumTopicHidden;
use crate::api::types::general_forum_topic_unhidden::GeneralForumTopicUnhidden;
use crate::api::types::giveaway::Giveaway;
use crate::api::types::giveaway_completed::GiveawayCompleted;
use crate::api::types::giveaway_created::GiveawayCreated;
use crate::api::types::giveaway_winners::GiveawayWinners;
use crate::api::types::inline_keyboard_markup::InlineKeyboardMarkup;
use crate::api::types::invoice::Invoice;
use crate::api::types::link_preview_options::LinkPreviewOptions;
use crate::api::types::location::Location;
use crate::api::types::maybe_inaccessible_message::MaybeInaccessibleMessage;
use crate::api::types::message_auto_delete_timer_changed::MessageAutoDeleteTimerChanged;
use crate::api::types::message_entity::MessageEntity;
use crate::api::types::message_origin::MessageOrigin;
use crate::api::types::passport_data::PassportData;
use crate::api::types::photo_size::PhotoSize;
use crate::api::types::poll::Poll;
use crate::api::types::proximity_alert_triggered::ProximityAlertTriggered;
use crate::api::types::sticker::Sticker;
use crate::api::types::story::Story;
use crate::api::types::successful_payment::SuccessfulPayment;
use crate::api::types::text_quote::TextQuote;
use crate::api::types::user::User;
use crate::api::types::users_shared::UsersShared;
use crate::api::types::venue::Venue;
use crate::api::types::video::Video;
use crate::api::types::video_chat_ended::VideoChatEnded;
use crate::api::types::video_chat_participants_invited::VideoChatParticipantsInvited;
use crate::api::types::video_chat_scheduled::VideoChatScheduled;
use crate::api::types::video_chat_started::VideoChatStarted;
use crate::api::types::video_note::VideoNote;
use crate::api::types::voice::Voice;
use crate::api::types::web_app_data::WebAppData;
use crate::api::types::write_access_allowed::WriteAccessAllowed;
use serde::{Deserialize, Serialize};

/// https://core.telegram.org/bots/api#message
/// This object represents a message.
#[derive(Debug, Serialize, Deserialize, Default)]
#[serde_with_macros::skip_serializing_none]
pub struct Message {
    message_id: i64,
    message_thread_id: Option<i64>,
    from: Option<User>,
    sender_chat: Option<Box<Chat>>,
    date: i64,
    chat: Chat,
    forward_origin: Option<MessageOrigin>,
    is_topic_message: Option<bool>,
    is_automatic_forward: Option<bool>,
    reply_to_message: Option<Box<Message>>,
    external_reply: Option<ExternalReplyInfo>,
    quote: Option<TextQuote>,
    via_bot: Option<User>,
    edit_date: Option<i64>,
    has_protected_content: Option<bool>,
    media_group_id: Option<String>,
    author_signature: Option<String>,
    text: Option<String>,
    entities: Option<Vec<MessageEntity>>,
    link_preview_options: Option<LinkPreviewOptions>,
    animation: Option<Animation>,
    audio: Option<Audio>,
    document: Option<Document>,
    photo: Option<Vec<PhotoSize>>,
    sticker: Option<Sticker>,
    story: Option<Story>,
    video: Option<Video>,
    video_note: Option<VideoNote>,
    voice: Option<Voice>,
    caption: Option<String>,
    caption_entities: Option<Vec<MessageEntity>>,
    has_media_spoiler: Option<bool>,
    contact: Option<Contact>,
    dice: Option<Dice>,
    game: Option<Game>,
    poll: Option<Poll>,
    venue: Option<Venue>,
    location: Option<Location>,
    new_chat_members: Option<Vec<User>>,
    left_chat_member: Option<User>,
    new_chat_title: Option<String>,
    new_chat_photo: Option<Vec<PhotoSize>>,
    delete_chat_photo: Option<bool>,
    group_chat_created: Option<bool>,
    supergroup_chat_created: Option<bool>,
    channel_chat_created: Option<bool>,
    message_auto_delete_timer_changed: Option<MessageAutoDeleteTimerChanged>,
    migrate_to_chat_id: Option<i64>,
    migrate_from_chat_id: Option<i64>,
    pinned_message: Option<MaybeInaccessibleMessage>,
    invoice: Option<Invoice>,
    successful_payment: Option<SuccessfulPayment>,
    users_shared: Option<UsersShared>,
    chat_shared: Option<ChatShared>,
    connected_website: Option<String>,
    write_access_allowed: Option<WriteAccessAllowed>,
    passport_data: Option<PassportData>,
    proximity_alert_triggered: Option<ProximityAlertTriggered>,
    forum_topic_created: Option<ForumTopicCreated>,
    forum_topic_edited: Option<ForumTopicEdited>,
    forum_topic_closed: Option<ForumTopicClosed>,
    forum_topic_reopened: Option<ForumTopicReopened>,
    general_forum_topic_hidden: Option<GeneralForumTopicHidden>,
    general_forum_topic_unhidden: Option<GeneralForumTopicUnhidden>,
    giveaway_created: Option<GiveawayCreated>,
    giveaway: Option<Giveaway>,
    giveaway_winners: Option<GiveawayWinners>,
    giveaway_completed: Option<GiveawayCompleted>,
    video_chat_scheduled: Option<VideoChatScheduled>,
    video_chat_started: Option<VideoChatStarted>,
    video_chat_ended: Option<VideoChatEnded>,
    video_chat_participants_invited: Option<VideoChatParticipantsInvited>,
    web_app_data: Option<WebAppData>,
    reply_markup: Option<InlineKeyboardMarkup>,
}
